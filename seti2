#include <fstream>
#include <iostream>
#include <thread>
#include <chrono>
#include <string>
#include <conio.h> // Для _kbhit() и _getch() (Windows)
#include <sstream>
#include <vector>
#include <iomanip> // Для форматирования времени

using namespace std;

// Функция для вычисления средней оценки
double calculateAverage(const vector<int>& grades) {
    double sum = 0;
    for (int grade : grades) {
        sum += grade;
    }
    return grades.empty() ? 0 : sum / grades.size();
}

// Функция для получения текущей даты и времени
string getCurrentDateTime() {
    auto now = chrono::system_clock::now();
    auto time_t_now = chrono::system_clock::to_time_t(now);

    struct tm timeinfo;
    localtime_s(&timeinfo, &time_t_now); // Безопасная версия localtime

    stringstream ss;
    ss << put_time(&timeinfo, "%Y-%m-%d %H:%M:%S"); // Формат: YYYY-MM-DD HH:MM:SS
    return ss.str();
}

void processFile(const string& inputFilename, const string& outputFilename) {
    ifstream inputFile(inputFilename);
    ofstream outputFile(outputFilename, ios::app); // Открытие файла для добавления данных в конец
    if (!inputFile) {
        cout << "Файл не открыт!\n\n";
        return;
    } else {
        cout << "Файл открыт для чтения!\n\n";
    }

    vector<int> grades; // Массив для хранения оценок
    int s1 = inputFile.tellg();
    int s2 = s1;

    bool paused = false;

    while (true) {
        if (_kbhit()) {
            char key = _getch();
            if (key == 27) { // ESC - выход
                cout << "\nПрограмма завершена.\n";
                exit(0);
            }
            if (key == 32) { // ПРОБЕЛ - пауза
                cout << "\nМониторинг приостановлен. Нажмите ENTER для продолжения..." << endl;
                paused = true;
            }
            if (key == 13 && paused) { // ENTER - продолжить
                cout << "Возобновление мониторинга...\n";
                paused = false;
            }
        }

        if (paused) {
            this_thread::sleep_for(chrono::milliseconds(200)); 
            continue;
        }

        this_thread::sleep_for(chrono::seconds(2));
        cout << "Файл тот же!" << endl;
        this_thread::sleep_for(chrono::seconds(3));

        inputFile.clear(); // Очищаем флаг ошибки
        inputFile.seekg(0, ios::end);
        s2 = inputFile.tellg();

        if (s2 != s1) {
            inputFile.seekg(0, ios::beg);
            string line;
            grades.clear(); // Очищаем вектор оценок

            // Чтение оценок из файла
            while (getline(inputFile, line)) {
                int grade = stoi(line); // Преобразуем строку в число
                grades.push_back(grade);
            }

            double average = calculateAverage(grades); // Вычисляем среднюю оценку
            string result = "Статус стипендии: ";
            string dateTime = getCurrentDateTime(); // Получаем текущее время

            if (average < 4) {
                result += "Стипендии нет";
            } else {
                result += "Стипендия доступна";
            }

            // Запись результата в файл с добавлением даты и времени
            outputFile << "[" << dateTime << "] " << result << " (Средняя оценка: " << average << ")" << endl;
        }

        inputFile.close();
        s1 = s2;
    }
}

int main() {
    setlocale(LC_ALL, "rus");

    // Укажи путь к файлам на диске Z:
    string inputFilename = "Z:\\abc.txt"; // Путь к файлу с оценками
    string outputFilename = "Z:\\result.txt"; // Путь для записи результата

    while (true) {
        processFile(inputFilename, outputFilename);
    }

    return 0;
}
