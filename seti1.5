#include <fstream>
#include <iostream>
#include <string>
#include <thread>
#include <chrono>

using namespace std;

// Структура для хранения данных студента
struct Student {
    char fio[100];    // Фиксированный массив для ФИО
    int age;
    char gender;
    int grades[5];    // Фиксированный массив для 5 оценок
    int gradeCount;   // Фактическое количество оценок
};

string filename = "Z:/web_seti/seti-1-izmenenie_last_stroki/seti-1-izmenenie_last_stroki/abc.bin";
string logFilename = "Z:/web_seti/seti-1-izmenenie_last_stroki/seti-1-izmenenie_last_stroki/log.txt";
string file_back = "Z:/web_seti/seti2/result.bin";

void clearFileBack() {
    ofstream file(file_back, ios::binary | ios::trunc);
    file.close();
}

string waitForServerResponse() {
    string lastResponse = "";
    while (true) {
        this_thread::sleep_for(chrono::milliseconds(500));
        ifstream file(file_back, ios::binary);
        if (!file) continue;

        string response;
        char buffer[1024];
        while (file.read(buffer, sizeof(buffer))) {
            response.append(buffer, file.gcount());
        }
        response.append(buffer, file.gcount());
        file.close();

        if (!response.empty() && response != lastResponse) {
            return response;
        }
    }
}

int main() {
    setlocale(LC_ALL, "rus");

    while (true) {
        cout << "\nВведите данные (ФИО возраст пол оценки через пробел, или 'exit' для выхода): ";
        string input;
        getline(cin, input);

        if (input == "exit") {
            cout << "Выход..." << endl;
            break;
        }

        Student student = {};
        stringstream ss(input);  // Исправленная строка
        string fioPart, temp;
        
        // Парсинг ФИО (может состоять из нескольких слов)
        string fullFio;
        while (ss >> temp) {
            if (isdigit(temp[0])) {  // Если попалось число, это уже возраст
                student.age = stoi(temp);
                break;
            }
            fullFio += temp + " ";
        }
        fullFio.pop_back();  // Удаляем последний пробел
        strncpy(student.fio, fullFio.c_str(), sizeof(student.fio) - 1);
        student.fio[sizeof(student.fio) - 1] = '\0';
        
        // Читаем пол
        ss >> student.gender;
        
        // Читаем оценки
        student.gradeCount = 0;
        while (student.gradeCount < 5 && ss >> temp) {
            student.grades[student.gradeCount++] = stoi(temp);
        }

        clearFileBack();

        // Запись структуры в бинарный файл
        ofstream file(filename, ios::binary | ios::app);
        if (!file) {
            cout << "Ошибка открытия файла!" << endl;
            return 1;
        }
        file.write(reinterpret_cast<const char*>(&student), sizeof(Student));
        file.close();

        // Логирование в текстовый файл
        ofstream logFile(logFilename, ios::app);
        if (!logFile) {
            cout << "Ошибка открытия файла лога!" << endl;
            return 1;
        }
        logFile << input << endl;
        logFile.close();

        cout << "Данные записаны! Ожидание ответа от сервера..." << endl;

        string response = waitForServerResponse();
        cout << "Ответ от сервера:\n" << response;
    }

    return 0;
}
